
# Keybindings Setup - Stolen from ArchWiki {{{
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete
[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search
# }}}

# No external command found {{{
command_not_found_handler () {
	# Executed in a sub-shell
	print -P "%F{#e88a38}%BCommand not found:%b%f %U$0%u"
	return 127
}
# }}}

# Dircolors {{{
if [[ -f ~/.config/dircolors ]]; then
  if command -v dircolors >/dev/null; then
    eval "$(dircolors -b ~/.config/dircolors)"
  elif command -v gdircolors >/dev/null; then
    eval "$(gdircolors -b ~/.config/dircolors)"
  fi
fi
# }}}

# Named Directories {{{

hash -d workspace=~/workspace
hash -d dots=~/dotfiles
hash -d nvim-dots=~/dotfiles/nvim
hash -d docs=~/Documents

# }}}

# Extraneous Sources {{{

# Options 
source $ZDOTDIR/opts.zsh
# Aliases
source $ZDOTDIR/alias.zsh
# Keybindings
source $ZDOTDIR/keys.zsh
# Completions
source $ZDOTDIR/completions.zsh
# Prompt
source $ZDOTDIR/prompt.zsh

# FZF
source $ZDOTDIR/fzf.zsh

# Misc. Custom
# source $ZDOTDIR/custom.zsh

# }}}

# Checks:
#   1. If we are in the base shell (Zellij will enter an infinitely recursive loop if not)
#   2. If we are in an interactive shell
# if [[ $SHLVL -eq 1 && $- == *i* ]]; then
#     sleep 0.1
#     zellij
#     # Exit with zellij's exit code once it's done
#     # exit $?
# else
# ricksay
cbonsai -p -m "Hello, James" -b 2 -M 11 -L 72 -c ':.,.:,<",C_'
# fi

# Sheldon {{{
eval "$(sheldon source)"
# }}}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


source /home/james/.config/broot/launcher/bash/br
# vim:foldmethod=marker
