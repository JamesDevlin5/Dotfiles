
" +----------------------------------+
" |          _                       |
" |   __   _(_)_ __ ___  _ __ ___    |
" |   \ \ / / | '_ ` _ \| '__/ __|   |
" |    \ V /| | | | | | | | | (__    |
" |     \_/ |_|_| |_| |_|_|  \___|   |
" |                                  |
" +----------------------------------+

" Options {{{
set cdpath+=~
set ignorecase smartcase infercase wildignorecase
set scrolloff=10 sidescrolloff=6 textwidth=89
set linebreak breakindent
let &showbreak=' ﬌ '
set display=lastline,uhex
set number
set cursorline
set nohlsearch
set hidden
set confirm
set autoread
set wildmenu wildmode=list:longest,full
set cmdheight=1 laststatus=2
set splitbelow splitright
set switchbuf=useopen,split
set mouse=nvi mousefocus mousemodel=popup_setpos
set concealcursor=nv conceallevel=1
set virtualedit=block
set backspace=indent,eol,start
set noshowmode showcmd
set belloff=all
set undolevels=9999
set showmatch matchtime=7
set nojoinspaces
set pastetoggle=<C-t>
set tabstop=2 shiftwidth=2 softtabstop=2 shiftround expandtab
set autoindent
set foldlevelstart=2 foldcolumn=3 foldmethod=indent
set foldopen-=hor
set diffopt=filler,context:4,vertical
set redrawtime=600
set ttimeoutlen=800
set updatetime=1000
set modelines=4
set complete-=i complete-=t " Don't scan unnecessary random files => quicker completion suggestions
set listchars=tab:\ ▸,eol:¬,trail:·,nbsp:
set fillchars=vert:$,fold:\.
set formatoptions=crq1j
set shortmess=inwaxoI

" {{{ Creates special directories if they do not exist (backup, swap, undo dirs)

" Creates the directory at the path, if it does not exists already
" function! s:ensureDirExists(dir_path)
"     return
"     if !isdirectory(dir_path)
"         call mkdir(dir_path)
"     endif
" endfunction

" let _b_dir=$HOME.'/.local/share/vim/backup'
" s:ensureExists(&_b_dir)
" let &backupdir=_b_dir
set backupdir-=\.

" let _swap_dir=$HOME.'/.local/share/vim/swap'
" s:ensureExists(&_swap_dir)
" let &directory=_swap_dir
set directory-=\. " Swapfile

" let _undo_dir=$HOME.'/.local/share/vim/undo'
" s:ensureExists(&_undo_dir)
set undofile undodir=~/.vim/undo
" let &undodir=_undo_dir

" }}}

let mapleader=' '
let maplocalleader='~'
 
" Shell is Bash
" let g:is_bash = 1

let g:skel_dir='~/.vim/skel'

" }}}

" {{{ Neovide
if has("neovide")
    let g:neovide_cursor_vfx_mode = "ripple"
    let g:neovide_fullscreen=v:true
    " let g:neovide_input_use_logo=v:true
    let g:neovide_cursor_animation_length=0.16
    let g:neovide_cursor_trail_length=0.5
    let g:neovide_cursor_antialiasing=v:true
    let g:neovide_cursor_vfx_particle_lifetime=1
else
    " {{{ Cursor switches size depending on mode
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"
    let &t_SR = "\e[4 q"
    " Ps = 0  -> blinking block.
    " Ps = 1  -> blinking block (default).
    " Ps = 2  -> steady block.
    " Ps = 3  -> blinking underline.
    " Ps = 4  -> steady underline.
    " Ps = 5  -> blinking bar (xterm).
    " Ps = 6  -> steady bar (xterm).
    " reset the cursor on start (for older versions of vim, usually not required)
    augroup cursorResetOnStart
        autocmd!
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
    " }}}
endif
" }}}

" {{{ Plugins

" {{{ Disable a bunch of (old) built-in plugins from loading
let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_zip = 1
let g:loaded_gzip = 1
let g:loaded_logipat = 1
let g:loaded_rrhelper = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zipPlugin = 1
let g:loaded_remote_plugins = 1
let g:loaded_shada_plugin = 1
let g:loaded_tutor_mode_plugin = 1
" let g:loaded_netrw       = 1
" let g:loaded_netrwPlugin = 1
" }}}

" Ensure Vim-Plug is installed {{{

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" }}}

" {{{ Plugin Sources
call plug#begin('~/.vim/plugged')

" {{{ Color Themes
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'romainl/apprentice'
Plug 'blueshirts/darcula'
Plug 'morhetz/gruvbox'
Plug 'tek256/simple-dark'
Plug 'joshdick/onedark.vim'
" }}}

Plug 'itchyny/lightline.vim'

" Git gutter-glyphs
Plug 'airblade/vim-gitgutter'
" Mark gutter-signatures
Plug 'kshenoy/vim-signature'
" Plug 'chrisbra/Colorizer', { 'on': 'ColorToggle' } " Requires Vim >= 8.0

" Local FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'
Plug 'jremmen/vim-ripgrep', {'on': 'Rg'}

" Plug 'yuki-yano/fzf-preview.vim'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
" Plug 'tpope/vim-dispatch'
" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}

Plug 'cespare/vim-toml', { 'branch': 'main', 'for': 'toml' }

" If nvim, use tree sitter!
if !has('nvim')
    Plug 'rust-lang/rust.vim', {'for': 'rust'}
endif

Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }

" Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'haya14busa/incsearch.vim'

Plug 'sukima/xmledit', { 'for': [ 'xml', 'html' ] }

Plug 'luochen1990/rainbow'
Plug 'jiangmiao/auto-pairs'
" Plug 'Yggdroot/indentLine'
Plug 'mbbill/undotree'

" Initialize plugin system
call plug#end()
" }}}

" {{{ Set Colorscheme
set bg=dark
try
    let colors = ['challenger_deep', 'apprentice', 'darcula', 'gruvbox', 'simple-dark-transparent', 'onedark']
    let color = colors[1]
    exe 'colorscheme '.color
catch /E185:/
    " If colorscheme doesn't exist, set to builtin
    echom "Couldn't find colorscheme: ".color."!"
    colorscheme pablo
endtry
" }}}

" {{{ Lightline
let g:lightline = {
      \ 'colorscheme': 'deus',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'bufinfo', 'paste', 'filepath' ],
      \     [ 'readonly', 'filename', 'ftypeicon' ],
      \     [ 'gitbranch', 'qfinfo' ]
      \   ],
      \   'right': [
      \     [ 'scrollbar', 'filetype' ],
      \     [ 'spell', 'lineinfo' ],
      \     [ 'percent', 'githunkstats' ]
      \   ]
      \ },
      \ 'inactive': {
      \   'left': [
      \     [ 'filepath', 'filename' ],
      \     [ 'readonly', 'ftypeicon' ],
      \     [ 'bufinfo' ]
      \   ],
      \   'right': [
      \     [ 'filetype' ],
      \     [ 'scrollbar', 'percent' ]
      \   ]
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ 'tabline': {
      \   'left': [ [ 'tabs' ] ],
      \   'right': [ [ 'close' ] ]
      \ },
      \ 'tab': {
      \   'active': [ 'tabnum', 'filename', 'modified' ],
      \   'inactive': [ 'tabnum', 'filename', 'modified' ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'filepath': 'LightlineFilepath',
      \   'gitbranch': 'LightlineFugHead',
      \   'readonly': 'LightlineReadonly',
      \   'spell': 'LightlineSpell',
      \   'lineinfo': 'LightlineLineinfo',
      \   'scrollbar': 'LightlineScrollbar',
      \   'qfinfo': 'LightlineQfinfo',
      \   'ftypeicon': 'LightlineFiletypeicon',
      \   'githunkstats': 'LightlineGithunkStats',
      \   'bufinfo': 'LightlineBufferInfo',
      \ },
      \ 'mode_map': {
      \   'n' : 'NORMAL',
      \   'i' : 'INSERT',
      \   'R' : 'REPLACE',
      \   'v' : 'VISUAL',
      \   'V' : 'VISUAL-LINE',
      \   "\<C-v>": 'VISUAL-BLOCK',
      \   'c' : 'COMMAND',
      \   's' : 'SELECT',
      \   'S' : 'SELECT-LINE',
      \   "\<C-s>": 'SELECT-BLOCK',
      \   't': 'TERMINAL',
      \ }
      \ }

function! LightlineReadonly()
    return &readonly && &filetype !=# 'help' ? '[  ] RO' : ''
endfunction

function! LightlineSpell()
    return &spell ? &spelllang.'  ' : ''
endfunction

function! LightlineFugHead()
    if empty(FugitiveGitDir())
        return 'Not in Git Dir'
    endif
    let branch_name = substitute(FugitiveStatusline(), '^\[Git(\(.*\))]$', '\1', '')
    return branch_name.'   '
endfunction

function! LightlineFilename()
    let _fname = expand('%:p:~:t')
    if _fname ==# ''
        " If filename is empty
        if &ft == 'qf'
            return '{ QF }'
        elseif &ft == 'netrw'
            return ''
        else
            return ' [No Name] '
        endif
    else
        let filename = _fname
        let modified = &modified ? '* ' : '  '
        return ' '.filename.modified
    endif
endfunction

function! LightlineFiletypeicon()
    let icon_map = { 'python': '  ', 'rust': '  ', 'c': ' ﭰ ', 'cpp': ' ﭱ ', 'vim': '  ',
                \   'javascript': '  ', 'html': '  ', 'xml': '  ', 'go': '  ', 'java': '  ',
                \   'text': '  ', 'terminal': '  ', 'shell': '  ', 'bash': '  ', 'zsh': '  ',
                \   'undotree': '  ', 'qf': '  ', 'scratch': '  ', 'netrw': '  ', 'todo': '  ',
                \   'gitcommit': '  ', 'markdown': '  ' }
    return get(icon_map, &filetype, '')
endfunction

function! LightlineFilepath()
    let fpath = expand('%:p:~:h')
    if fpath[0] == '~'
        let fpath = ' ﮟ ' . fpath[1:]
    endif
    return substitute(fpath, '/', '  ', 'g')
endfunction

function! LightlineLineinfo()
    if &filetype == 'undotree' || &filetype == 'qf' | return '' | endif
    return printf("c %d  ln (%d/%d)", col('.'), line('.'), line('$'))
endfunction

function! LightlineQfinfo()
    if &filetype == 'qf'
        return "Entry:  ".line('.')
    else
        return ''
    endif
endfunction

function! LightlineGithunkStats()
    let [a,m,r] = GitGutterGetHunkSummary()
    let l:res = []
    " for [amt, sym] in [[a, '+'], [m, '~'], [r, '-']]
    "     if amt != 0
    "         call add(l:res, printf(sym.'%02d', sym))
    "     endif
    " endfor
    " return join(l:res, ', ')
    if a != 0
        call add(l:res, printf(' %02d', a))
    endif
    if m != 0
        call add(l:res, printf('ﰣ %02d', m))
    endif
    if r != 0
        call add(l:res, printf(' %02d', r))
    endif
    return join(l:res, ', ')
    " return printf(' %02d, ﰣ %02d,  %02d', a, m, r)
    " if a == 0 && m == 0 && r == 0 | return '' | endif
    " return printf(' %02d, ﰣ %02d,  %02d', a, m, r)
    " return printf('+%d, ~%d, -%d', a, m, r)
endfunction

function! LightlineScrollbar()
    let width = 12
    let percent = (line('.') - 1.0) / (max([line('$'), 2]) - 1.0)
    let before = float2nr(round(percent * (width - 4)))
    let after = width - 4 - before
    return repeat(' ', before).'ﰊ '.repeat('·', after)
endfunction

function! LightlineBufferInfo()
    let l:bnum = bufnr('%')
    return "Buf ".l:bnum
endfunction

" }}}

" {{{ Undo Tree
let g:undotree_WindowLayout       = 2
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_ShortIndicators    = 0
let g:undotree_TreeNodeShape      = '-'
let g:undotree_TreeVertShape      = ''

function! g:Undotree_CustomMap()
    nmap <buffer> K <plug>UndotreeNextState
    nmap <buffer> J <plug>UndotreePreviousState
    nmap <buffer> Q <plug>UndotreeClose
    nmap <buffer> r <plug>UndotreeRedo
    nmap <buffer> u <plug>UndotreeUndo
endfunc
" }}}

" {{{ Git Gutter
set foldtext=gitgutter#fold#foldtext()

" let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_enabled = 1
let g:gitgutter_signs = 1
" let g:gitgutter_highlight_lines = 1

let g:gitgutter_diff_args = '-w'
let g:gitgutter_grep = 'rg'

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_removed_above_and_below = '{'
let g:gitgutter_sign_modified_removed = '*'

function! GitGutterNextHunkCycle()
    let line = line('.')
    silent! GitGutterNextHunk
    if line('.') == line
        1
        GitGutterNextHunk
    endif
endfunction

nnoremap ghl :GitGutterLineHighlightsToggle<CR>

" }}}

" {{{ Indent Line
" let g:indentLine_defaultGroup = 'CursorLineNr'
" let g:indentLine_enabled = 0
" let g:indentLine_color_term = 49
" let g:indentLine_showFirstIndentLevel = 1
" let g:indentLine_setConceal = 0
" let g:indentLine_char = '┊'
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" Enabled for filetypes:
" let g:indentLine_fileType = ['rust', 'python', 'vim', 'java', 'c', 'cpp']
" let g:indentLine_fileExclude = ['text', 'sh', 'bash', 'zsh', 'markdown', 'html', 'undotree', 'qf', 'netrw', 'man', 'help']
" let g:indentLine_bufTypeExclude = ['help', 'terminal']
" let g:vim_json_syntax_conceal = 0
" "}}}

" {{{ Inc Search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#consistent_n_direction = 1
let g:incsearch#do_not_save_error_message_history = 1
let g:incsearch#separate_highlight = 1
" let g:incsearch#no_inc_hlsearch = 1

" Turn off 'hlsearch' after cursor move
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Search previous pattern
noremap <expr> <Leader>/ incsearch#go({'pattern': histget('/', -1)})

augroup incsearch-keymap
    autocmd!
    autocmd VimEnter * call s:incsearch_keymap()
    autocmd User IncSearchEnter set hls cul
    autocmd User IncSearchLeave set nohls nocul
augroup END

function! s:incsearch_keymap()
    IncSearchNoreMap <C-j>   <Over>(incsearch-next)
    IncSearchNoreMap <C-k>   <Over>(incsearch-prev)
    IncSearchNoreMap <C-n>   <Over>(incsearch-scroll-f)
    IncSearchNoreMap <C-p>   <Over>(incsearch-scroll-b)
    IncSearchNoreMap <Tab>   <Over>(buffer-complete)        
    IncSearchNoreMap <S-Tab> <Over>(buffer-complete-prev)
endfunction

" }}}

" {{{ Markdown
let g:vim_markdown_emphasis_multiline = 0
let g:vim_markdown_follow_anchor = 1
" let g:vim_markdown_anchorexpr = "substitute(v:anchor, '-', ' ', 'g')"
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_autowrite = 1
" Use 2 spaces instead of 4
let g:vim_markdown_new_list_item_indent = 2
" }}}

" {{{ FZF

function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
endfunction

let g:fzf_action = {
            \ 'ctrl-g': function('s:build_quickfix_list'),
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-s': 'split',
            \ 'ctrl-v': 'vsplit'
            \ }

let g:fzf_layout = { 'down': '45%' }
let g:fzf_history_dir = '~/.local/share/fzf-history'

let g:fzf_colors = {
            \ 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'border':  ['fg', 'Ignore'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }

" Show a preview
let g:fzf_preview_window = ['right:65%', 'ctrl-o']

command! Colorfzf call fzf#run(fzf#wrap({
            \   'source': map(split(globpath(&rtp, 'colors/*.vim')), 'fnamemodify(v:val, ":t:r")'),
            \   'sink': 'colo',
            \ }))
" call fzf#vim#colors(<bang>0)

command! -bang -complete=dir -nargs=? Ls
            \ call fzf#run(fzf#wrap('ls',
            \   {'source': 'ls', 'dir': <q-args>}, <bang>0))

" Script that comes packaged with FZF, and uses bat
" command! -bang -nargs=? -complete=dir Files
"     \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', '~/.vim/plugged/fzf.vim/bin/preview.sh {}']}, <bang>0)
" command! -bang -nargs=? -complete=dir Fiii
"             \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', 'if [ -f {} ]; then ~/.vim/plugged/fzf.vim/bin/preview.sh {}; else ls {}; fi']}, <bang>0)
command! -bang -nargs=? -complete=dir Fls
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

nnoremap <silent> <Leader>F :Files!<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>p :BLines<CR>
nnoremap <silent> <Leader>m :Marks<CR>
nnoremap <silent> <Leader>w :Windows<CR>

inoremap <expr> <C-x>f fzf#vim#complete#path('fd --hidden')
inoremap <expr> <C-x>s fzf#vim#complete('cat /usr/share/dict/words')

" }}}

" {{{ Auto Pairs
" TODO: Remove '<' and '>' autopairs from bash
let g:AutoPairsMultilineClose = 0
let g:AutoPairsShortcutToggle = "\<LocalLeader>("

let g:AutoPairs = {
            \   '(':')',
            \   '[':']',
            \   '{':'}',
            \   "'":"'",
            \   '"':'"',
            \   '`':'`',
            \   '<':'>'
            \ }

augroup filetype_pairs
    autocmd!
    autocmd Filetype markdown let b:AutoPairs = {
                \   '*':'*',
                \   '_':'_',
                \   '~':'~'
                \ }
augroup END
" }}}

" Commentary
augroup set_comment_str
  autocmd!
  autocmd Filetype bash,gitcommit let &commentstring="# %s"
augroup END

" let g:SignatureMarkLineHL = 'SpellRare'
let g:SignatureDeleteConfirmation = 1
let g:SignaturePurgeConfirmation = 1
let g:SignatureMarkerTextHLDynamic = 1

let g:rg_highlight = 0
let g:rg_derive_root = 1
let g:rg_root_types = ['.git', 'src']

" Enable rainbow parens
let g:rainbow_active = 1
let g:rainbow_conf = { 'ctermfgs': [ 'LightBlue', 'Red', 'Green', 'White', 'Yellow' ] }

" Don't save .netrwhist files
let g:netrw_dirhistmax = 0

" }}}

" Keys {{{

" Disable some stuff
nnoremap <Leader> <Nop>
nnoremap <LocalLeader> <Nop>
nnoremap [# <Nop>
nnoremap ]# <Nop>

inoremap OD <Left>
inoremap OC <Right>

" Prev split
" nnoremap <Leader><Leader> <C-w><C-p>
nnoremap <Leader>Q :quit<CR>
nnoremap <Leader>c :close<CR>
nnoremap <Leader>w :write<CR>
nnoremap <C-s> :update<CR>
inoremap <C-s> <C-o>:update<CR>
nnoremap <silent> <C-q> :try \| tabclose \| catch \| qa \| endtry<CR>
inoremap jk <Esc>
inoremap jjj <Esc>
nnoremap <Leader>e :Lexplore 35<CR>
nnoremap <LocalLeader>h :Hsh<CR>
nnoremap Q @q

inoreabbr @@ devlin.ja@husky.neu.edu
inoreabbr JD James Devlin

inoreabbr adn and
inoreabbr si is
inoreabbr ni in

cnoreabbr W write!
cnoreabbr Q quit!

inoremap <C-r> <Nop>
" Insert (vim) command line output directly into buffer
inoremap <C-r><C-r> <C-r>=

cnoremap <expr> <c-n> wildmenumode() ? "\<c-n>" : "\<down>"
cnoremap <expr> <c-p> wildmenumode() ? "\<c-p>" : "\<up>"

nnoremap j gj
nnoremap k gk

nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" Redo
nnoremap U <C-r>
inoremap <C-l> <C-o>l
inoremap <C-h> <C-o>h

" Paste, then fix indentation
nnoremap p p`[V`]=`>
nnoremap P P`[V`]=`>
nnoremap \p p
nnoremap \P P

" Edit Macro
nnoremap <leader>r  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>

" Open URL under cursor (in firefox)
nnoremap <Leader>go :silent exe '!open -a firefox '.matchstr(getline('.'), 'http\S*')<CR>

" Source file
nnoremap <Leader>sf :source %<CR>
nnoremap <Leader>P :echo expand("%:p:~")<CR>

" {{{ Visual Selection Manipulation
" Wraps a selection in fold-markers
vnoremap <silent> <Leader>f <Esc>`<O<Esc>`>o<Esc>`<kV`>jzf`<0a<Space><Esc>`>0a<Space><Esc>`<A<Space>

" Joins the selected lines, with a bar-suffix appended to each line
vnoremap <Leader>j :s/$/\ \|/<CR>`>$2xgvJ
" }}}

" Folding {{{
nnoremap <Leader>f0 :setlocal foldlevel=0<CR>
nnoremap <Leader>f1 :setlocal foldlevel=1<CR>
nnoremap <Leader>f2 :setlocal foldlevel=2<CR>
nnoremap <Leader>f3 :setlocal foldlevel=3<CR>
nnoremap <Leader>f4 :setlocal foldlevel=4<CR>
nnoremap <Leader>f5 :setlocal foldlevel=5<CR>
nnoremap <Leader>f6 :setlocal foldlevel=6<CR>
" }}}

" Movement {{{
nnoremap <C-f> <C-f>zz
nnoremap <C-d> <C-d>zz
nnoremap <C-b> <C-b>zz
nnoremap <C-u> <C-u>zz

" Move Lines
" nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
" nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

" Move lines down with ctrl-j, or up with ctrl-k
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Add Empty Lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>
" Visual Movement
xnoremap <  <gv
xnoremap >  >gv


" Quickfix
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz
" Location List
nnoremap ]l :lnext<cr>zz
nnoremap [l :lprev<cr>zz
" Buffers
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>
" Tabs
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>
nnoremap <C-t> :tabnew<cr>
" Hunks
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" }}}

" Circular window navigation
nnoremap <Tab>   <C-w>w
nnoremap <S-Tab> <C-w>W

" Split Window, Don'T Switch Focus
nnoremap <Leader>V <C-w>v<C-w><C-w>
nnoremap <Leader>H <C-w>s<C-w><C-w>

function! s:sentCase(str)
    return substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
endfunction

function! s:titleCase(str)
    return substitute(a:str,'\(\<\w\+\>\)', '\u&', 'g')
endfunction

function! TwiddleCase(str)
    let l:cache = { 'lower': tolower(a:str), 'upper': toupper(a:str) }
    " Upper --> Lower
    if a:str ==# l:cache['upper']
        echom "Lowercase"
        return l:cache['lower']
    endif

    " Lower --> Sentence
    let l:cache['sent'] = s:sentCase(a:str)
    if a:str ==# l:cache['lower']
        echom "Sentence-Case"
        return l:cache['sent']
    endif

    " Sentence --> Uppercase
    if a:str ==# l:cache['sent']
        echom "Uppercase"
        return l:cache['upper']
    endif

    echom "Title-Case"
    return s:titleCase(a:str)
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv"))

" Buffer Navigation {{{
" nnoremap <M-1> :b1<CR>
" nnoremap <M-2> :b2<CR>
" nnoremap <M-3> :b3<CR>
" nnoremap <M-4> :b4<CR>
" nnoremap <M-5> :b5<CR>
" nnoremap <M-6> :b6<CR>
" nnoremap <M-7> :b7<CR>
" nnoremap <M-8> :b8<CR>
" nnoremap <M-9> :b9<CR>
" }}}

" Shebang
inoreabbrev <expr> #!! "#!/usr/bin/env" . (empty(&filetype) ? '' : ' '.&filetype)

" Delete easier
inoremap <C-Bs> <C-w>
nnoremap D d$
nnoremap C c$
nnoremap Y y$
nnoremap dD v0d
nnoremap cC v0c

" Completion menu navigation
function! SmartTab()
  if pumvisible() || (col('.') > 1 && getline('.')[col('.')-1]==' ')
    return "\<C-n>"
  else
    return "\<Tab>"
  endif
endfunction

inoremap <expr> <Esc>   pumvisible() ? "\<C-e>":                  "\<Esc>"
inoremap <expr> <CR>    pumvisible() ? "\<C-y>":                  "\<CR>"
inoremap <expr> <Down>  pumvisible() ? "\<C-n>":                  "\<Down>"
inoremap <expr> <Up>    pumvisible() ? "\<C-p>":                  "\<Up>"
inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>": "\<C-d>"
inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>":   "\<C-u>"
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>":                  "\<Tab>"
inoremap <Tab>   <C-o>:echo SmartTab()<CR>
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>":                  "\<S-Tab>"

" inoremap <Tab> <C-r>=SmartTabKeyPress()<CR>
" function! SmartTabKeyPress()
"     " 1. Check if the completion menu is open
"     if pumvisible()
"         return "\<C-n>"
"     endif
"     " 2. Check if this could be starting the completion menu
"     "    + If there is some text immediately preceding the cursor, to infer a query from
"     let l:col = col('.')
"     if l:col == 1
"         " First Column => Left character space does not exist
"         return "\<Tab>"
"     endif

"     " Get current line, extract char immediately before cursor, remove any whitespace
"     let l:substr = substitute(strpart(getline('.'), l:col-1, 1), '\(\S\)', '\1', '')

"     " If there is only whitespace before the cursor, this probably wasn't a call to
"     " start completion. Insert tab-whitespace instead
"     if (strlen(l:substr) == 0)
"         return "\<Tab>"
"     else
"         return "\<C-n>"
"     endif

"     " let has_period = match(l:substr, '\.') != -1
"     " let has_slash = match(l:substr, '\/') != -1
"     " if (!has_period && !has_slash)
"     "     return "\<C-x>\<C-p>"
"     " endif
" endfunction

" {{{ Operator-Pending Mappings

" Entire Line
onoremap L :<C-u>normal! ^v$<CR>

" }}}


" Plugin Keys {{{

nnoremap <Leader>u :UndotreeToggle<CR>

nnoremap <silent> <Leader>gg :Git<CR>

nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
nmap ghp <Plug>(GitGutterPreviewHunk)
nnoremap gqf :GitGutterQuickFix<CR>:copen<CR>

nnoremap <Leader>GG :Goyo<CR>zz



" {{{ Visual Split Resizing
xmap <C-W>gr  <Plug>(Visual-Split-VSResize)
xmap <C-W>gss <Plug>(Visual-Split-VSSplit)
xmap <C-W>gsa <Plug>(Visual-Split-VSSplitAbove)
xmap <C-W>gsb <Plug>(Visual-Split-VSSplitBelow)

nmap <C-W>gr  <Plug>(Visual-Split-Resize)
nmap <C-W>gss <Plug>(Visual-Split-Split)
nmap <C-W>gsa <Plug>(Visual-Split-SplitAbove)
nmap <C-W>gsb <Plug>(Visual-Split-SplitBelow)
" }}}

" nnoremap <Leader>tc :ColorToggle<CR>

" }}}

" }}}

" Funcs and Commands {{{

" :Groot | Change directory to the root of the Git repository
function! s:gitRoot()
    let root = systemlist('git rev-parse --show-toplevel')[0]
    if v:shell_error
        echoe 'Not in git repo'
    else
        execute 'lcd' root
        execute 'Lexplore 30'
        echohl ModeMsg
        echo 'Changed directory to: '.root
        echohl None
    endif
endfunction

command! Groot call s:gitRoot()
command! Home cd ~

" Todo
function! s:todo() abort
    let entries = []
    for cmd in ['git grep -niI -e TODO -e FIXME -e XXX 2> /dev/null',
                \ 'grep -rniI -e TODO -e FIXME -e XXX * 2> /dev/null']
        let lines = split(system(cmd), '\n')
        if v:shell_error != 0 | continue | endif
        for line in lines
            let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
            call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
        endfor
        break
    endfor

    if !empty(entries)
        call setqflist(entries)
        copen
    endif
endfunction
command! Todo call s:todo()

" Make file executable
command! Ex if !empty(expand('%'))
            \|   write
            \|   call system('chmod +x '.expand('%'))
            \|   silent e
            \| else
            \|   echohl WarningMsg
            \|   echo 'Save the file first'
            \|   echohl None
            \| endif

" Creates a scratch buffer from some existing buf
command! Scratchify setlocal nobuflisted buftype=nofile bufhidden=delete noswapfile
" New vertical scratch window
command! Scratch vnew +Scratchify
nnoremap <Leader>ss :Scratch<CR>
" New horizontal scratch window
command! SScratch new +Scratchify
nnoremap <Leader>sS :SScratch<CR>
" New vertical scratch window
command! TScratch tabnew +Scratchify
nnoremap <Leader>sT :TScratch<CR>

command! Hsh set hlsearch! hls?
command! Cul set cursorline! cul?
command! Erc :edit $MYVIMRC
command! Ecd :lcd ~/.vim/ | :Lexplore

" Sudo write
command! Sudo w !sudo tee "%" > /dev/null

" See changes since last write
command! Chngs w !diff -y % -

" Toggle the QuickFix window
nnoremap <silent> <Leader>q :copen<CR>
" Toggle the LocList window
nnoremap <silent> <Leader>l :lopen<CR>

function! Wordcount(filename)
    " Get the number of lines, words, and chars in a file
    let l:counts = split(system('wc -mlw '.a:filename))
    echo 'file:  '.a:filename
    echo 'lines: '.l:counts[0]
    echo 'words: '.l:counts[1]
    echo 'chars: '.l:counts[2]
endfunction
" Wordcount current file
command! Wc call Wordcount(expand("%"))

function! Test()
    let l:tagfiles = globpath(&rtp, '**/doc/tags', 0, 1)
    let l:helptags = []
    for tfile in l:tagfiles
        call extend(l:helptags, readfile(tfile))
    endfor
    call fzf#run(fzf#wrap('Help Tags', { 'source': l:helptags, 'sink': 'e', 'options': ['--preview', ''] }))
endfunction

" Highlight long lines
" au BufWinEnter * let w:m1=matchadd('Search', '\%<81v.\%>77v', -1)
" au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

" Then clear matches:
" call matchdelete(w:m1)
" call matchdelete(w:m2)
" " or
" call clearmatches()

" }}}

" Autocmds {{{

augroup startup_screen
    autocmd!
    " Return to previous edit position
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
    " If no file, show current directory
    autocmd VimEnter *
                \ if expand("%") == "" |
                \   silent e . |
                \   echohl WarningMsg |
                \   echo "In Directory:\t" . fnamemodify(".", ":p:~") |
                \   echohl None |
                \ endif
augroup END

augroup active_win_cursorline
    autocmd!
    autocmd InsertLeave,WinEnter * set cursorline
    autocmd InsertEnter,WinLeave * set nocursorline
augroup END

" {{{ Skeleton Files
" Takes a filetype, or extension, and appends the full path to the skeleton file
" corresponding to this filetype
function! s:nameSkelFile(ext)
    return g:skel_dir.'/skel.'.a:ext
endfunction

" Creates a new skeleton file for the specified filetype
function! NewSkelFile(ext)
    let l:skelfile = s:nameSkelFile(a:ext)
    exe 'new '.l:skelfile
    let &filetype = a:ext
endfunction

function! s:maybeReadSkelFile(ext)
    " If the filetype matches
    if &ft == a:ext
        let l:skelname = s:nameSkelFile(a:ext)
        " If the skeleton file doesn't exist
        if empty(glob(l:skelname))
            " no skel file
            return
        endif
        exe 'silent 0r '.l:skelname
        normal G
        echohl DiffAdd
        echom 'Loaded skeleton file:    '.l:skelname
        echohl None
    endif
endfunction

augroup newfile_templates
    autocmd!
    autocmd BufNewFile * call s:maybeReadSkelFile('sh')
    autocmd BufNewFile * call s:maybeReadSkelFile('bash')
    autocmd BufNewFile * call s:maybeReadSkelFile('zsh')
    autocmd BufNewFile * call s:maybeReadSkelFile('cmake')
    autocmd BufNewFile * call s:maybeReadSkelFile('html')
    autocmd BufNewFile * call s:maybeReadSkelFile('python')
augroup END
" }}}

augroup gitcommit_file_utils
    autocmd!
    autocmd Filetype gitcommit Git \--paginate diff \--cached
augroup END

" }}}

" vim:ft=vim:fdm=marker
